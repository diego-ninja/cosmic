{
    "name": "diego-ninja/cosmic",
    "description": "Cosmic CLI microframework compatible with Symfony Console",
    "type": "library",
    "license": "MIT",
    "autoload": {
        "psr-4": {
            "Ninja\\Cosmic\\": "src/"
        },
        "files": [
            "helper/functions.php",
            "helper/constants.php"
        ]
    },
    "authors": [
        {
            "name": "Diego Rin Martin",
            "email": "yosoy@diego.ninja"
        }
    ],
    "require": {
        "php": "^8.2",
        "ext-posix": "*",
        "adbario/php-dot-notation": "^3.3",
        "jolicode/jolinotif": "dev-main",
        "nunomaduro/collision": "^7",
        "nunomaduro/termwind": "^1.15",
        "php-di/invoker": "~2.0",
        "php-di/php-di": "^7",
        "psr/container": "^2.0",
        "ramsey/uuid": "^4.7",
        "symfony/console": "^6",
        "symfony/process": "^6",
        "vlucas/phpdotenv": "^5"
    },
    "require-dev": {
        "captainhook/captainhook": "^5.10",
        "captainhook/plugin-composer": "^5.3",
        "dealerdirect/phpcodesniffer-composer-installer": "^1",
        "ergebnis/composer-normalize": "^2.30",
        "icanhazstring/composer-unused": "^0.8.7",
        "maglnet/composer-require-checker": "^4.5",
        "moxio/captainhook-psalm": "^0.3.0",
        "php-parallel-lint/php-console-highlighter": "^1.0",
        "php-parallel-lint/php-parallel-lint": "^1.3",
        "phpunit/phpunit": "^10",
        "psalm/plugin-phpunit": "^0.18.4",
        "ramsey/conventional-commits": "^1.3",
        "roave/security-advisories": "dev-latest",
        "squizlabs/php_codesniffer": "^3.5",
        "vimeo/psalm": "^5"
    },
    "config": {
        "allow-plugins": {
            "captainhook/plugin-composer": true,
            "dealerdirect/phpcodesniffer-composer-installer": true,
            "ergebnis/composer-normalize": true
        }
    },
    "scripts": {
        "deps": "@dev:deps",
        "dev:analyze": [
            "@dev:analyze:psalm"
        ],
        "dev:analyze:psalm": "psalm --no-cache",
        "dev:build:clean": "git clean -fX builds/",
        "dev:deps": [
            "@dev:deps:missing",
            "@dev:deps:unused"
        ],
        "dev:deps:missing": "php vendor/bin/composer-require-checker --config-file=$(pwd)/crc.config.json",
        "dev:deps:unused": "php vendor/bin/composer-unused",
        "dev:lint": [
            "@dev:lint:syntax",
            "@dev:lint:style"
        ],
        "dev:lint:fix": "phpcbf",
        "dev:lint:style": "phpcs --colors --encoding=utf-8 -n",
        "dev:lint:syntax": "parallel-lint --colors src/ tests/",
        "dev:test": [
            "@dev:lint",
            "@dev:analyze",
            "@dev:test:unit"
        ],
        "dev:test:coverage:ci": "phpunit --colors=always --coverage-text --coverage-clover build/coverage/clover.xml --coverage-cobertura build/coverage/cobertura.xml --coverage-crap4j build/coverage/crap4j.xml --coverage-xml build/coverage/coverage-xml --log-junit build/junit.xml",
        "dev:test:coverage:html": "phpunit --colors=always --coverage-html build/coverage/coverage-html/",
        "dev:test:unit": "phpunit --colors=always --testdox",
        "dev:test:unit:debug": "phpunit --colors=always --testdox -d xdebug.profiler_enable=on",
        "test": "@dev:test"
    },
    "scripts-descriptions": {
        "deps": "Checks for missing and unused dependencies.",
        "dev:analyze": "Runs all static analysis checks.",
        "dev:analyze:psalm": "Runs the Psalm static analyzer.",
        "dev:build:clean": "Cleans the build/ directory.",
        "dev:deps": "Checks for missing and unused dependencies.",
        "dev:deps:missing": "Checks for missing dependencies.",
        "dev:deps:unused": "Checks for unused dependencies.",
        "dev:lint": "Runs all linting checks.",
        "dev:lint:fix": "Auto-fixes coding standards issues, if possible.",
        "dev:lint:style": "Checks for coding standards issues.",
        "dev:lint:syntax": "Checks for syntax errors.",
        "dev:test": "Runs linting, static analysis, and unit tests.",
        "dev:test:coverage:ci": "Runs unit tests and generates CI coverage reports.",
        "dev:test:coverage:html": "Runs unit tests and generates HTML coverage report.",
        "dev:test:unit": "Runs unit tests.",
        "test": "Runs linting, static analysis, and unit tests."
    }

}
